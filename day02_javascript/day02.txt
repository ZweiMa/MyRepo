1. JavaScript的起源
    脚本语言(运行在客户端-->浏览器)
    1995年由网景公司，在导航者浏览器上首次设计实现而成，原名LiveScript，后来和sun公司有合作
    更名为JavaScript本质来说和java没有关系
    JavaScript总共分成三部分: ECMAScript(基本语法)、BOM(浏览器对象模型)、DOM(文档对象模型)
2. JavaScript的特性
    脚本语言
    基于对象
    弱类型
    事件驱动
    跨平台性
3. HelloWorld
    ① 创建按钮
    ② 在按钮的下方创建一个script标签
    ③ 编写js代码
    案例：
        <form>
            <input type="button" value="点我" id="btn01"/>
        </form>
        <script>
            var ele=document.getElementById("btn01");
            ele.onclick=function () {
                alert("你点我了...");
            }
        </script>
4. js的引入方式
    4.1 内部脚本
        在html页面内创建script标签，标签内编写js代码(script标签可以在html页面的任何位置)
        加一个事件： window.onload=function(){js代码}
        案例：
            <script>
                window.onload=function () {
                    var ele=document.getElementById("btn01");
                    ele.onclick=function () {
                        alert("你点我了...");
                    }
                }
            </script>
    4.2 外部引入
        创建一个js文件(后缀为.js的文件)，将js代码写在js文件内，然后在html页面中引入js文件
        <script src="./javascript.js"></script>
        注意：一旦script标签作为引入的标签，这个标签内的js代码失效
5. javascript的基本语法
    5.1 数据类型
        基本数据类型
            数值型 number
            字符串 string
            布尔型 boolean
                布尔型和其他数据类型的自动转化
                true：非零的数值，非空字符串，非空对象
                false：零，空字符串，null，undefined,NaN
        引用数据类型
            对象
            数组
    5.2 变量
        关键字： var  -->  let
        变量的声明：  var 变量名;
        变量的赋值：  变量名=值;    二合一： var 变量名=值;

        特点：
            一个变量声明了但是没有赋值，他的值是undefined(未定义)
    5.3 js中的函数(方法)
        ① 有名函数：
            语法：function 方法名(形参列表){代码块}
        ② 匿名函数：
            语法：function (形参列表){代码块}
            应用场景：
                绑定事件的时候应用
                案例：
                    ele.onclick=function () {
                        代码
                    }
            后期添加名称的：
                var fun02=function () {
                    alert("这是匿名函数...");
                }
                调用方式：和上一个一样
        传递参数的问题：
            方法定义位置需要设置形参
                function fun(a,b,c){}
            调用方法位置
                fun01(10,20);
            注意：实参和形参的个数是可以不一致，类型更没有要求
        返回值的问题：
            在函数内部，编写return语句即可

    js提供的函数：
        alert("弹框的内容");         警示框
        confirm("弹框内容");         确认框
        console.log();             控制台的日志打印
6. js中的对象
    6.1 通过new关键字
        //1. 创建对象
        var obj=new Object();
        //2. 指定属性和属性值
        obj.id=1001;
        obj.name="tom";
        obj.age=20;
        //3. 指定函数
        obj.eat=function (a,b) {
            alert(this.name+"在吃饭"+a+b);
        }
        obj.run=function () {
            alert(this.name+"在锻炼");
        }

        //4. 访问属性值
        alert(obj.id);
        alert(obj.name);
        alert(obj.age);
        alert(obj.gender);

        obj.eat(1,2);
    6.2 通过{}   ★
        var obj={
            id:1002,
            name:"jack",
            age:20,
            eat:function () {
                alert("吃饭");
            },
            run:function () {
                alert("跑步");
            }
        }
        对象的使用和上一个是一样的
    6.3 this关键字
        ① 用在函数外的(直接在script标签下)
            this就是window对象
        ② 函数内 ★
            当前对象(看谁调用这个函数)

7. js中的数组
    ① 通过new关键字
         创建数组
           var arr=new Array();
         存值
             arr[0]=10;
             arr[1]=20.5;
             arr[2]="java";
             arr[3]=true;
             arr.push("python");
             arr.push(100);
         取值
             for(var i=0;i<arr.length;i++){
                 console.log(arr[i]);
             }
    ② 通过[]
        var arrs=[10,"java","mysql",false,1.5];

    常用的属性和方法
        arr.length   数组的长度
        arr.push("python");   添加数据
        arrs.reverse();     数组的反转
        arrs.join("-");     数组元素的拼接，最终返回的是string
        arrs.splice(2,2)    数组删除元素
8. json格式的数据
    功能：跨平台(异步系统)数据传输，json格式的数据是首选
    格式说明：json格式的数据中只有两个括号：{}-->对象  []-->数组
    8.1 json对象
        案例：见  06_json格式的数据.html
    8.2 json字符串(String)
        json数据的格式
            Object jsonObj=JSON.parse(String str);
            要求：字符串必须满足json对象的格式要求，否则转化不成功
9. dom(文档对象模型)操作
    9.1 概念
        整个文档      document
        元素(标签)    element
        属性          attribute
        标签体(文本)   text
    9.2 dom操作的查询
        ① 在整个文档范围内查询元素节点
            document.getElementById
            document.getElementsByName
            document.getElementsByClassName
            document.getElementsByTagName
        ② 在具体元素节点范围内查找子节点
            element.children
            element.firstElementChild
            element.lastElementChild
        ③ 根据子级找父级
            element.parentElement;
        ④ 找兄弟
            element.previousElementSibling
            element.nextElementSibling
        ⑤ 如何操作一个元素的属性
            取值：element.属性名
            赋值：element.属性名=值
        ⑥ 如何操作一个元素的标签体
            取值：
                element.innerText;
                element.innerHTML;
            赋值
                element.innerText=值;
                element.innerHTML=值;
    9.3 dom操作的增删改
            document.createElement("li")   新建元素对象
            element.appendChild(ele)       在父级内追加子级
            ul.insertBefore(li,sz);        将li插入到sz的前面
            ul.replaceChild(li,sz);        将li替换掉sz
            remove()                        删除
10. 事件绑定
    单击事件：鼠标单击左键触发的事件
    事件的绑定方式：
        ① 动态绑定
            a. 获得需要绑定的元素对象
                 var ele=document.getElementById("btn01");
            b. 对象.事件名称=function(){}
                 ele.onclick=function () {}
        ② 静态绑定
            直接在元素上，添加属性，调用有名函数
            <input type="button" value="按钮" onclick="fun01(1,2)"/>
            function fun01(a,b) {
                alert(100+a+b);
            }
